worker_processes 2;
error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;

events {
    worker_connections 128;
}

http {
    include /etc/nginx/mime.types;
    default_type text/plain;

    client_body_temp_path /var/tmp 1 2;
    proxy_temp_path /var/tmp 1 2;
    fastcgi_temp_path /var/tmp 1 2;
    uwsgi_temp_path /var/tmp 1 2;
    scgi_temp_path /var/tmp 1 2;

    log_format time_combined '$remote_addr - $remote_user [$time_local]  '
                             '"$request" $status $body_bytes_sent '
                             '"$http_referer" "$http_user_agent" $request_time '
                             '"$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log time_combined buffer=2k;

    server_tokens off;

    # CVE-2017-7529: http://mailman.nginx.org/pipermail/nginx-announce/2017/000200.html
    # TODO: Remove after nginx version is 1.13.3 or later.
    max_ranges 1;

    aio off;
    directio off;
    sendfile off;
    gzip on;

    # Use large enough buffers for Content Security Policy support.
    fastcgi_buffers 16 16k;
    fastcgi_buffer_size 32k;

    # On the nginx version we have on F20 (nginx/1.4.7), nginx sends a malformed HTTP
    # response for 'Request-URI Too Large'
    # http://mailman.nginx.org/pipermail/nginx/2012-July/034578.html
    #
    # This is bad because styx consideres this an error, and will mark the binding
    # unhealthy. As a workaround, we are going to bump this buffer
    # size to avoid hitting 'Request-URI Too Large'
    #
    large_client_header_buffers 4 32k;

    proxy_read_timeout 900s;
    fastcgi_read_timeout 900s;

    auth_basic_user_file  htpasswd;



    map $http_user_agent $auth_basic_realm {
        default off;
        Photon/1.0 "off";
    }

    server {
        server_name localhost
        listen unix:/var/run/mysql-resurrection.sock;
        location / {
            proxy_intercept_errors on;
            proxy_set_header Host $host;
            error_page 418 = @backtophp;
            proxy_pass http://10.128.0.203:452;
        }

        location @backtophp {
            auth_basic $auth_basic_realm;

            fastcgi_pass php:9000;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME /var/www/docroot/$fastcgi_script_name;
            include /etc/nginx/fastcgi_params;
            # Catch php-fpm timeout errors
            error_page 504 /504.html;
        }
    }

    # We use $http_user_agent_https to determine if the request arrived at the platform
    # as an http or an https request. Capture that here for use later. $client_scheme
    # will be appropriately set to either http or https.
    map $http_user_agent_https $client_scheme {
        default $scheme;
        ON https;
        OFF http;
    }

    server {
        # separate ipv4 and ipv6 listeners to ensure ipv4 are not logged as ipv6 (http://forum.nginx.org/read.php?2,226955,226957#msg-226957)
        #listen [::]:18778 ipv6only=on ssl;
        listen 80;





        root /var/www/docroot/;
        index index.php index.html index.htm;
        port_in_redirect off;

        client_max_body_size 100M;

        gzip              on;
        gzip_proxied      any;
        gzip_types        text/plain text/html text/css application/x-javascript application/json text/xml application/xml application/xml+rss text/javascript application/x-font-ttf font/opentype application/vnd.ms-fontobject image/svg+xml;
        gzip_vary         on;
        gzip_http_version 1.0;

# ssl_certificate           /var/certs/binding.crt;
# ssl_certificate_key       /var/certs/binding.key;
# ssl_client_certificate    /etc/pantheon/helios_and_internal.crt;
# ssl_protocols             TLSv1.2;
# ssl_ciphers               ECDHE-RSA-AES128-GCM-SHA256;
# ssl_prefer_server_ciphers on;
# ssl_verify_client         on;
# ssl_session_timeout       12h;
# ssl_session_cache         shared:AppserverSSLCache:1m;
        keepalive_timeout         70;

        error_page 495 496 497 =557 /styx_ssl_error.html;

        # Platform domains (assigned by Pantheon): ["php7-2-dockertest.pantheonsite.io"]

        location /nginx_status {
            if ($http_x_access_key != 'docker') {
                return 403;
            }

            stub_status on;
            access_log   off;
        }

        location /fpm_status {
            if ($http_x_access_key != 'docker') {
                return 403;
            }

            fastcgi_pass php:9000;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME /var/www/docroot/$fastcgi_script_name;
            include /etc/nginx/fastcgi_params;
            access_log   off;
        }

        location /fpm_ping {
            fastcgi_pass php:9000;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME /var/www/docroot/$fastcgi_script_name;
            include /etc/nginx/fastcgi_params;
            access_log   off;
        }

        location =/pantheon_healthcheck {
            fastcgi_pass php:9000;
            fastcgi_param SCRIPT_FILENAME /srv/includes/pantheon_healthcheck.php;
            include /etc/nginx/fastcgi_params;

            # Keep access log to prevent reaping.
            # access_log   off;
        }

        location /nginx_ping {
            return 204;
        }

        # No reading git files
        location ~ /\.git {
            deny all;
        }

        # Block any php file in the 'vendor' directory
        # n.b. In order for this to be secure, it must match the allowed
        # fastcgi_locations locations defined in _appserver_bindings.rb.
        # Currently, '\.php$' is the only on that overlaps with '^/vendor/'.
        location ~ ^/vendor/.* {
            # Go straight to @cleanurl without 'try_files' or php execution
            try_files pantheon_blocked_file.html @cleanurl;
        }


        # Quicksilver Web-PHP scripts
        location ~ ^/private/.*\.php$ {
            if ($http_x_env_access_key != 'docker') {
                return 403;
            }

            # Enforce that the Content-Type of webphp scripts is UTF-8 so
            # customers don't have to remember to add this header themselves.
            # Do this by injecting a PHP default for this request.
            # Results in a header like so:
            # Content-Type: text/plain; charset=UTF-8
            fastcgi_param PHP_VALUE "default_mimetype=\"text/plain\"
default_charset=\"UTF-8\"";

            try_files $uri $uri/;
            fastcgi_pass php:9000;
            include /etc/nginx/fastcgi_params;

            fastcgi_split_path_info ^(.+?\.php)(|/.*)$;
            fastcgi_param SCRIPT_FILENAME /var/www/docroot/$fastcgi_script_name;

            # Don't pass the site access key, or other headers, through to the PHP script.
            fastcgi_pass_request_headers off;

            # Pass all error codes directly back to client (Amazon Lambda / SWF),
            # instead of munging them here with the `error_page` directive.
            fastcgi_intercept_errors off;
        }

        # Protect paths per the site's pantheon.yml.
        # Also includes platform-provided paths, including:
        #   - /private/                         (for private code)
        #   - /sites/default/files/private/       (for private files)
        #   - /sites/default/config/
        #   - /sites/default/files/config/
        # We use a prefix path match with '^~' to prevent further searching.
        location ~ ^/private/ {
            deny all;
        }
        location ~ ^/sites/default/files/private/ {
            deny all;
        }
        location ~ ^/sites/default/config/ {
            deny all;
        }
        location ~ ^/sites/default/files/config/ {
            deny all;
        }

        # Original formula Drupal code protection as per .htaccess
        location ~ \.(engine|inc|install|make|module|profile|po|sh|.*sql|theme|twig|tpl(\.php)?|xtmpl|yml)(~|\.sw[op]|\.bak|\.orig|\.save)?$|^(\.(?!well-known).*|Entries.*|Repository|Root|Tag|Template|composer\.(json|lock))$|^#.*#$|\.php(~|\.sw[op]|\.bak|\.orig|\.save)$ {
            # Go straight to @cleanurl without 'try_files' or php execution
            try_files pantheon_blocked_file.html @cleanurl;
        }

        # Protect the pantheon.yml file (Quicksilver / platform configuration)
        location ~ ^/pantheon.yml$ {
            return 403;
        }

        # Try site errors, then pantheon errors
        location ~ ^/(504|403|502|php_in_valhalla|locked|maintenance|styx_ssl_error|cannot_install_d8)\.html$ {


            expires 5s;
            try_files $uri /error_pages/$uri;
        }

        # Root for pantheon errors
        location /error_pages/ {


            expires 5s;
            root /srv;
        }

        location ~ /sites/default/files/.*\.php$ {
            error_page 403 /php_in_valhalla.html;
            return 403;
        }

        location ~ ^/robots.txt {


            expires 1d;
            root /srv/error_pages;
        }

        # FuseDAV peer caching support.
        location /fusedav-peer-cache/files/ {
            alias        /var/cache/files/;
            access_log   off;
        }

        # Web fonts support.
        location ~* \.(eot|ttf|woff|woff2|otf|svg)$ {
            auth_basic $auth_basic_realm;


            add_header Access-Control-Allow-Origin *;  # Firefox needs this.

            try_files $uri $uri/ @cleanurl;


            expires       -1;
            log_not_found off;
        }

        # Support for .svgz
        location ~* \.(svgz)$ {
            auth_basic $auth_basic_realm;

            try_files $uri $uri/ @cleanurl;



            expires       -1;



            add_header Content-encoding gzip;  # So browsers will gunzip

            gzip          off; # don't double-compress
        }


        # Set the Cache-Control expirations for static assets to configured TTLs.
        # The TTL is generally long for Live and shorter for pre-production.
        # This could be done with an 'if' in the '/' location, but the
        # http://wiki.nginx.org/IfIsEvil page is scary.
        location ~ \.(js|JS|css|CSS|webp|WEBP|WebP|png|PNG|igs|IGS|iges|IGES|jpg|JPG|jpeg|JPEG|gif|GIF|ico|ICO|txt|TXT|xml|mp4|MP4)$ {
            auth_basic $auth_basic_realm;

            try_files $uri $uri/ /index.php?$args;


            expires          -1;
            log_not_found    off;
        }

        location = / {
            
            auth_basic $auth_basic_realm;
        # @drupal is true for d6, d7 and d8. We want to use @cleanurl for d6 and d7.
            try_files $uri $uri/ /index.php?$args;
            error_page 301 =301 $client_scheme://$host$uri/$is_args$args;


            # Catch directory listing errors (i.e. no code)
            error_page 403 =561 /403.html;
        }

        location / {
            
            auth_basic $auth_basic_realm;
        # @drupal is true for d6, d7 and d8. We want to use @cleanurl for d6 and d7.
            try_files $uri $uri/ /index.php?$args;
            error_page 301 =301 $client_scheme://$host$uri/$is_args$args;


            # Send directory listing errors to the CMS
            error_page 403 /index.php?$args;
        }



        location @cleanurl {
            rewrite ^/(.*)$ /index.php?q=$1 last;
        }

        # These need to be listed from most specific to most general.

        location ~ ^/simplesaml/ {
            
            auth_basic $auth_basic_realm;

            # There could be several add_header directives. These directives are inherited from the previous level if and only if there are no add_header directives defined on the current level.
            # As per: http://nginx.org/en/docs/http/ngx_http_headers_module.html




            
            fastcgi_intercept_errors on;
            fastcgi_pass php:9000;
            fastcgi_index index.php;
            include /etc/nginx/fastcgi_params;
            # Allow SimpleSamlPHP to work by settig PATH_INFO, etc
            fastcgi_split_path_info ^(.+?\.php)(|/.*)$;
            fastcgi_param SCRIPT_FILENAME /var/www/docroot/$fastcgi_script_name;
            # Catch php-fpm timeout errors
            error_page 504 /504.html;
            # Catch php-fpm connection errors
            error_page 550 = @mysqlresurrector; # Potential internal "DB offline" status.
            # Catch MySQL connection errors
            error_page 503 = @mysqlresurrector;

        }
        location ~ ^/update.php|authorize.php {
            
            auth_basic $auth_basic_realm;

            # There could be several add_header directives. These directives are inherited from the previous level if and only if there are no add_header directives defined on the current level.
            # As per: http://nginx.org/en/docs/http/ngx_http_headers_module.html




            
            # Content-Type: text/html; charset=UTF-8
            fastcgi_param PHP_VALUE "default_mimetype=\"text/html\"
default_charset=\"UTF-8\"";

            
            fastcgi_intercept_errors on;
            fastcgi_pass php:9000;
            fastcgi_index index.php;
            include /etc/nginx/fastcgi_params;
            # Allow SimpleSamlPHP to work by settig PATH_INFO, etc
            fastcgi_split_path_info ^(.+?\.php)(|/.*)$;
            fastcgi_param SCRIPT_FILENAME /var/www/docroot/$fastcgi_script_name;
            # Catch php-fpm timeout errors
            error_page 504 /504.html;
            # Catch php-fpm connection errors
            error_page 550 = @mysqlresurrector; # Potential internal "DB offline" status.
            # Catch MySQL connection errors
            error_page 503 = @mysqlresurrector;

        }
        location ~ ^/index.php$ {
            
            auth_basic $auth_basic_realm;

            # There could be several add_header directives. These directives are inherited from the previous level if and only if there are no add_header directives defined on the current level.
            # As per: http://nginx.org/en/docs/http/ngx_http_headers_module.html




            try_files /index.php =561 /403.html;
            
            # Content-Type: text/html; charset=UTF-8
            fastcgi_param PHP_VALUE "default_mimetype=\"text/html\"
default_charset=\"UTF-8\"";

            
            fastcgi_intercept_errors on;
            fastcgi_pass php:9000;
            fastcgi_index index.php;
            include /etc/nginx/fastcgi_params;
            # Allow SimpleSamlPHP to work by settig PATH_INFO, etc
            fastcgi_split_path_info ^(.+?\.php)(|/.*)$;
            fastcgi_param SCRIPT_FILENAME /var/www/docroot/$fastcgi_script_name;
            # Catch php-fpm timeout errors
            error_page 504 /504.html;
            # Catch php-fpm connection errors
            error_page 550 = @mysqlresurrector; # Potential internal "DB offline" status.
            # Catch MySQL connection errors
            error_page 503 = @mysqlresurrector;

        }
        location ~ \.php$ {
            
            auth_basic $auth_basic_realm;

            # There could be several add_header directives. These directives are inherited from the previous level if and only if there are no add_header directives defined on the current level.
            # As per: http://nginx.org/en/docs/http/ngx_http_headers_module.html




            try_files $uri /index.php?$args;
            
            # Content-Type: text/html; charset=UTF-8
            fastcgi_param PHP_VALUE "default_mimetype=\"text/html\"
default_charset=\"UTF-8\"";

            
            fastcgi_intercept_errors on;
            fastcgi_pass php:9000;
            fastcgi_index index.php;
            include /etc/nginx/fastcgi_params;
            # Allow SimpleSamlPHP to work by settig PATH_INFO, etc
            fastcgi_split_path_info ^(.+?\.php)(|/.*)$;
            fastcgi_param SCRIPT_FILENAME /var/www/docroot/$fastcgi_script_name;
            # Catch php-fpm timeout errors
            error_page 504 /504.html;
            # Catch php-fpm connection errors
            error_page 550 = @mysqlresurrector; # Potential internal "DB offline" status.
            # Catch MySQL connection errors
            error_page 503 = @mysqlresurrector;

        }

        location @mysqlresurrector {
            proxy_set_header Host $host;
            proxy_pass http://unix:/var/run/mysql-resurrection.sock;
        }

        location ~ /\.ht {
            deny all;
        }
    }
}
